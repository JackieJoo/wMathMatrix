(function _Basic_s_() {

'use strict';

let _ = _global_.wTools;
let abs = Math.abs;
let min = Math.min;
let max = Math.max;
let pow = Math.pow;
let pi = Math.PI;
let sin = Math.sin;
let cos = Math.cos;
let sqrt = Math.sqrt;
let sqr = _.math.sqr;

let Parent = null;
let Self = _.Matrix;

_.assert( _.objectIs( _.vectorAdapter ) );
_.assert( _.routineIs( Self ), 'wMatrix is not defined, please include wMatrix.s first' );

// --
// borrow
// --

/**
 * The method is a temporary cache for matrix,
 * writes the matrix to a specific object depending on the index.
 * Depends on index and key that is generated by bufferConstruction name and dimensions of matrix.
 *
 * @example
 * var buffer = new I32x( 6 )
 *
 * var m = new _.Matrix
 * ({
 *   buffer,
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var got = matrix._tempBorrow( m, [ 4, 4 ], 1 );
 * console.log( got );
 * // log
 * new I32x
 * [
 *  0, 0, 0, 0,
 *  0, 0, 0, 0,
 *  0, 0, 0, 0,
 * ];
 *
 * @param { Matrix } Matrix - an instance of matrix.
 * @param { Array } dims - size of provided matrix.
 * @param { Number } index - Number of method, which will be called.
 * @returns { Matrix } - Returns instance of Matrix based on provided arguments.
 * @method _tempBorrow
 * @throws { Error } If (arguments.length) is not 3.
 * @throws { Error } If {-src-} is not instance of Matrix.
 * @throws { Error } If {-dims-} is not array.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function _tempBorrow( src, dims, index )
{
  let bufferConstructor;

  _.assert( arguments.length === 3, 'Expects exactly three arguments' );
  _.assert( src instanceof Self || src === null );
  _.assert( _.arrayIs( dims ) || dims instanceof Self || dims === null );

  if( !src )
  {

    // debugger;
    // bufferConstructor = this.array.ArrayType;
    // bufferConstructor = this.longDescriptor;
    bufferConstructor = this.long.longDescriptor.type;
    if( !dims )
    dims = src;

  }
  else
  {

    if( src.buffer )
    bufferConstructor = src.buffer.constructor;

    if( !dims )
    if( src.dims )
    dims = src.dims.slice();

  }

  if( dims instanceof Self )
  dims = dims.dims;

  _.assert( _.routineIs( bufferConstructor ) );
  _.assert( _.arrayIs( dims ) );
  _.assert( index < 3 );

  let key = bufferConstructor.name + '_' + dims.join( 'x' );

  if( this._tempMatrices[ index ][ key ] )
  return this._tempMatrices[ index ][ key ];

  let result = this._tempMatrices[ index ][ key ] = new Self
  ({
    dims,
    buffer : new bufferConstructor( this.AtomsPerMatrixForDimensions( dims ) ),
    inputTransposing : 0,
  });

  return result;
}

//

/**
 * This is a specialized method for executing tempBorrow for passing [ 0 ] index.
 *
 * @param { Matrix } Matrix - an instance of matrix.
 * @returns { Matrix } - Returns instance of Matrix based on provided arguments.
 * @method tempBorrow1
 * @throws { Error } If (arguments.length) is more than 1.
 * @throws { Error } If {-src-} is not instance of Matrix.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function tempBorrow1( src )
{

  _.assert( arguments.length <= 1 );
  if( src === undefined )
  src = this;

  if( this instanceof Self )
  return Self._tempBorrow( this, src , 0 );
  else if( src instanceof Self )
  return Self._tempBorrow( src, src , 0 );
  else
  return Self._tempBorrow( null, src , 0 );

}

//

/**
 * This is a specialized method for executing tempBorrow for passing [ 1 ] index.
 *
 * @param { Matrix } Matrix - an instance of matrix.
 * @returns { Matrix } - Returns instance of Matrix based on provided arguments.
 * @method tempBorrow1
 * @throws { Error } If (arguments.length) is more than 1.
 * @throws { Error } If {-src-} is not instance of Matrix.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function tempBorrow2( src )
{

  _.assert( arguments.length <= 1 );
  if( src === undefined )
  src = this;

  if( this instanceof Self )
  return Self._tempBorrow( this, src , 1 );
  else if( src instanceof Self )
  return Self._tempBorrow( src, src , 1 );
  else
  return Self._tempBorrow( null, src , 1 );

}

//

/**
 * This is a specialized method for executing tempBorrow for passing [ 2 ] index.
 *
 * @param { Matrix } Matrix - an instance of matrix.
 * @returns { Matrix } - Returns instance of Matrix based on provided arguments.
 * @method tempBorrow1
 * @throws { Error } If (arguments.length) is more than 1.
 * @throws { Error } If {-src-} is not instance of Matrix.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function tempBorrow3( src )
{

  _.assert( arguments.length <= 1 );
  if( src === undefined )
  src = this;

  if( this instanceof Self )
  return Self._tempBorrow( this, src , 2 );
  else if( src instanceof Self )
  return Self._tempBorrow( src, src , 2 );
  else
  return Self._tempBorrow( null, src , 2 );

}

// --
// mul
// --

/**
 * The method matrix.pow is short-cut matrixPow returns an instance of Matrix with exponentiation values of provided matrix,
 * takes destination matrix from context.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   3, 2, 3,
 *   4, 0, 2
 *   0, 0, 6,
 * ]);
 *
 * var got = matrix.pow( 2 );
 * console.log( got );
 * // log :  +17, +6, +31,
 * //        +12, +8, +24,
 * //        +0,  +0, +36,
 *
 * @param { Number } exponent - The power of elements.
 * @returns { Matrix } - Returns instance of Matrix.
 * @method pow
 * @throws { Error } If method called by not an instance of matrix constructor.
 * @throws { Error } If (arguments.length) is not 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

/* Dmytro : need clarification */

function matrixPow( exponent )
{

  _.assert( _.instanceIs( this ) );
  _.assert( arguments.length === 1, 'Expects single argument' );

  let t = this.tempBorrow( this );

  // self.mul(  );

}

//

/**
 * The routine  mul() ( shortcut for routine mul_static ) returns the result of multiplication of matrices {-srcs-}.
 *
 * @example
 * var buffer = new I32x
 * ([
 *   2,  2, -2,
 *  -2, -3,  4,
 *   4,  3, -2,
 * ]);
 *
 * var m = new _.Matrix
 * ({
 *   buffer,
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var got = _.Matrix.mul( null, [ m, m ] );
 * console.log( got.toStr() );
 * // log :  -8,  -8,  +8,
 * //       +18, +17, -16,
 * //        -6,  -7,  +8,
 *
 * @param { Null|Matrix } dst - The container for result.
 * @param { Array } srcs - Array with matrices.
 * @returns { Matrix } - Returns new Matrix instance with multiplies values of buffer.
 * @function mul
 * @throws { Error } If (arguments.length) is not 2.
 * @throws { Error } If {-srcs-} is not an Array.
 * @throws { Error } If srcs.length is less then 2.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function mul_static( dst, srcs )
{

  _.assert( arguments.length === 2, 'Expects exactly two arguments' );
  _.assert( _.arrayIs( srcs ) );
  _.assert( srcs.length >= 2 );

  /* adjust dst */

  if( dst === null )
  {
    let dims = [ this.NrowOf( srcs[ srcs.length-2 ] ) , this.NcolOf( srcs[ srcs.length-1 ] ) ];
    dst = this.makeSimilar( srcs[ srcs.length-1 ] , dims );
  }

  /* adjust srcs */

  srcs = srcs.slice();
  let dstClone = null;

  let odst = dst;
  dst = this.from( dst );

  for( let s = 0 ; s < srcs.length ; s++ )
  {

    srcs[ s ] = this.from( srcs[ s ] );

    if( dst === srcs[ s ] || dst.buffer === srcs[ s ].buffer )
    {
      if( dstClone === null )
      {
        dstClone = dst.tempBorrow1();
        dstClone.copy( dst );
      }
      srcs[ s ] = dstClone;
    }

    _.assert( dst.buffer !== srcs[ s ].buffer );

  }

  /* */

  dst = this.mul2Matrices( dst , srcs[ 0 ] , srcs[ 1 ] );

  /* */

  if( srcs.length > 2 )
  {

    let dst2 = null;
    let dst3 = dst;
    for( let s = 2 ; s < srcs.length ; s++ )
    {
      let src = srcs[ s ];
      if( s % 2 === 0 )
      {
        dst2 = dst.tempBorrow2([ dst3.dims[ 0 ], src.dims[ 1 ] ]);
        this.mul2Matrices( dst2 , dst3 , src );
      }
      else
      {
        dst3 = dst.tempBorrow3([ dst2.dims[ 0 ], src.dims[ 1 ] ]);
        this.mul2Matrices( dst3 , dst2 , src );
      }
    }

    if( srcs.length % 2 === 0 )
    this.CopyTo( odst, dst3 );
    else
    this.CopyTo( odst, dst2 );

  }
  else
  {
    this.CopyTo( odst, dst );
  }

  return odst;
}

//

/**
 * The method mul() provides multiplication of matrices {-srcs-}.
 * The result of multiplication assigns to the current matrix.
 *
 * @example
 * var buffer = new I32x
 * ([
 *   2,  2, -2,
 *  -2, -3,  4,
 *   4,  3, -2,
 * ]);
 *
 * var m = new _.Matrix
 * ({
 *   buffer,
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var got = m.mul( [ m, m ] );
 * console.log( got.toStr() );
 * // log :  -8,  -8,  +8,
 * //       +18, +17, -16,
 * //        -6,  -7,  +8,
 *
 * @param { Array } srcs - Array with matrices.
 * @returns { Matrix } - Returns new Matrix instance with multiplies values of buffer.
 * @method mul
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If {-srcs-} is not array.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function mul( srcs )
{
  let dst = this;

  _.assert( arguments.length === 1, 'Expects single argument' );
  _.assert( _.arrayIs( srcs ) );

  return dst.Self.mul( dst, srcs );
}

//

/**
 * The routine Mul2Matrices() provides multiplication of two matrices {-src1-} and {-src2-}.
 * The result of multiplication assigns to destination matrix {-dst-}.
 *
 * @example
 * var src1 = new _.Matrix
 * ({
 *   buffer : [ 2, 2, 2, 2, 3, 4, 4, 3, -2 ],
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var src2 = new _.Matrix
 * ({
 *   buffer : [ 3, 2, 3, 4, 0, 2, 0, 0, 6 ],
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var dst = new _.Matrix
 * ({
 *   buffer : new I32x( [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var got = _.Matrix.mul2Matrices( dst, src1, src2 )
 * console.log( got )
 * // log : +14, +4, +22,
 * //       +18, +4, +36,
 * //       +24, +8,  +6,
 *
 * @param { Null|Matrix } dst - Destination matrix.
 * @param { Matrix } src1 - Source Matrix.
 * @param { Matrix } src2 - Source Matrix.
 * @returns { Matrix } - Returns instance of destination matrix filled by result of multiplication.
 * @function Mul2Matrices
 * @throws { Error } If (arguments.length) is not 3.
 * @throws { Error } If {-dst-} is not a Matrix, not a Null.
 * @throws { Error } If {-src1-} or {-src2-} is not instance of Matrix.
 * @throws { Error } If src1.dims or src2.dims length is not 2.
 * @throws { Error } If {-dst-} and {-src1-} are the same instance of matrix.
 * @throws { Error } If {-dst-} and {-src2-} are the same instance of matrix.
 * @throws { Error } If src1.dims[ 1 ] is not equal to src2.dims[ 0 ].
 * @throws { Error } If src1.dims[ 0 ] is not equal to dst.dims[ 0 ].
 * @throws { Error } If src1.dims[ 1 ] is not equal to dst.dims[ 1 ].
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function Mul2Matrices( dst, src1, src2 )
{

  src1 = this.fromForReading( src1 );
  src2 = this.fromForReading( src2 );

  if( dst === null )
  {
    dst = this.make([ src1.dims[ 0 ], src2.dims[ 1 ] ]);
  }

  _.assert( arguments.length === 3, 'Expects exactly three arguments' );
  _.assert( src1.dims.length === 2 );
  _.assert( src2.dims.length === 2 );
  _.assert( dst instanceof Self );
  _.assert( src1 instanceof Self );
  _.assert( src2 instanceof Self );
  _.assert( dst !== src1 );
  _.assert( dst !== src2 );
  _.assert( src1.dims[ 1 ] === src2.dims[ 0 ], 'Expects src1.dims[ 1 ] === src2.dims[ 0 ]' );
  _.assert( src1.dims[ 0 ] === dst.dims[ 0 ] );
  _.assert( src2.dims[ 1 ] === dst.dims[ 1 ] );

  let nrow = dst.nrow;
  let ncol = dst.ncol;

  for( let r = 0 ; r < nrow ; r++ )
  for( let c = 0 ; c < ncol ; c++ )
  {
    let row = src1.rowVectorGet( r );
    let col = src2.colVectorGet( c );
    let dot = this.vectorAdapter.dot( row, col );
    dst.atomSet( [ r, c ], dot );
  }

  return dst;
}

//

/**
 * The method mul2Matrices() provides multiplication of two matrices {-src1-} and {-src2-}.
 * The result of multiplication assigns to destination matrix {-dst-}.
 *
 * @example
 * var src1 = new _.Matrix
 * ({
 *   buffer : [ 2, 2, 2, 2, 3, 4, 4, 3, -2 ],
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var src2 = new _.Matrix
 * ({
 *   buffer : [ 3, 2, 3, 4, 0, 2, 0, 0, 6 ],
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var dst = new _.Matrix
 * ({
 *   buffer : new I32x( [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var got = dst.mul2Matrices( src1, src2 )
 * console.log( got )
 * // log : +14, +4, +22,
 * //       +18, +4, +36,
 * //       +24, +8,  +6,
 *
 * @param { Matrix } src1 - Source Matrix.
 * @param { Matrix } src2 - Source Matrix.
 * @returns { Matrix } - Returns original matrix filled by result of multiplication.
 * @method mul2Matrices
 * @throws { Error } If (arguments.length) is not 2.
 * @throws { Error } If {-src1-} or {-src2-} is not instance of Matrix.
 * @throws { Error } If src1.dims or src2.dims length is not 2.
 * @throws { Error } If {-dst-} and {-src1-} are the same instance of matrix.
 * @throws { Error } If {-dst-} and {-src2-} are the same instance of matrix.
 * @throws { Error } If src1.dims[ 1 ] is not equal to src2.dims[ 0 ].
 * @throws { Error } If src1.dims[ 0 ] is not equal to self.dims[ 0 ].
 * @throws { Error } If src1.dims[ 1 ] is not equal to self.dims[ 1 ].
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function mul2Matrices( src1, src2 )
{
  let dst = this;

  _.assert( arguments.length === 2, 'Expects exactly two arguments' );

  return dst.Self.mul2Matrices( dst, src1, src2 );
}

//

/**
 * The method mulLeft() provides multiplication of current matrix on source matrix {-src-}.
 * The result assigns to the current matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   1, 2, 3,
 *   0, 4, 5
 *   0, 0, 6,
 * ]);
 *
 * var src = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   1, 2, 3,
 *   4, 1, 2,
 *   0, 0, 1,
 * ]);
 *
 * var got = matrix.mulLeft( src );
 * console.log( matrix );
 * // log :  +9, +4, +10,
 * //       +16, +4, +13
 * //        +0, +0,  +6,
 *
 * @param { Matrix } src - Source Matrix.
 * @returns { Matrix } - Returns original matrix filled by result of multiplication.
 * @method mulLeft
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If {-src-} is not an instance of Matrix.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function mulLeft( src )
{
  let dst = this;

  _.assert( arguments.length === 1, 'Expects single argument' );

  dst.mul([ dst, src ])

  return dst;
}

//

/**
 * The method mulRight() provides multiplication of source matrix {-src-} on current matrix.
 * The result assigns to the current matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   1, 2, 3,
 *   0, 4, 5
 *   0, 0, 6,
 * ]);
 *
 * var src = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   1, 2, 3,
 *   4, 1, 2,
 *   0, 0, 1,
 * ]);
 *
 * var got = matrix.mulRight( src );
 * console.log( got );
 * // log :  +9, +4, +10,
 * //       +16, +4, +13
 * //        +0, +0,  +6,
 *
 * @param { Matrix } src - Source Matrix.
 * @returns { Matrix } - Returns original matrix filled by result of multiplication.
 * @method mulRight
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If {-src-} is not an instance of Matrix.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function mulRight( src )
{
  let dst = this;

  _.assert( arguments.length === 1, 'Expects single argument' );

  dst.mul([ src, dst ]);

  return dst;
}

// //
//
// function _mulMatrix( src )
// {
//
//   _.assert( arguments.length === 1, 'Expects single argument' );
//   _.assert( src.breadth.length === 1 );
//
//   let self = this;
//   let atomsPerRow = self.atomsPerRow;
//   let atomsPerCol = src.atomsPerCol;
//   let code = src.buffer.constructor.name + '_' + atomsPerRow + 'x' + atomsPerCol;
//
//   debugger;
//   if( !self._tempMatrices[ code ] )
//   self._tempMatrices[ code ] = self.Self.make([ atomsPerCol, atomsPerRow ]);
//   let dst = self._tempMatrices[ code ]
//
//   debugger;
//   dst.mul2Matrices( dst, self, src );
//   debugger;
//
//   self.copy( dst );
//
//   return self;
// }
//
// //
//
// function mulAssigning( src )
// {
//   let self = this;
//
//   _.assert( arguments.length === 1, 'Expects single argument' );
//   _.assert( self.breadth.length === 1 );
//
//   let result = self._mulMatrix( src );
//
//   return result;
// }
//
// //
//
// function mulCopying( src )
// {
//   let self = this;
//
//   _.assert( arguments.length === 1, 'Expects single argument' );
//   _.assert( src.dims.length === 2 );
//   _.assert( self.dims.length === 2 );
//
//   let result = Self.make( src.dims );
//   result.mul2Matrices( result, self, src );
//
//   return result;
// }

// --
// partial accessors
// --

/**
 * The method zero() assigns the value `0` to each element of the current matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   1, 2, 3,
 *   0, 4, 5
 *   0, 0, 6,
 * ]);
 *
 * var got = matrix.zero();
 * console.log( got );
 * // log : +0, +0, +0,
 * //       +0, +0, +0
 * //       +0, +0, +0,
 *
 * @returns { Matrix } - Returns the original matrix filled by zeros.
 * @method zero
 * @throws { Error } If arguments are passed.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function zero()
{
  let self = this;

  _.assert( arguments.length === 0, 'Expects no arguments' );

  self.atomEach( ( it ) => self.atomSet( it.indexNd, 0 ) );

  return self;
}

//

/**
 * The method identity() transforms current matrix to identity matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   3, 2, 3,
 *   4, 0, 2
 *   0, 0, 6,
 * ]);
 *
 * var got = matrix.identity();
 * console.log( got );
 * // log : +1, +0, +0,
 * //       +0, +1, +0,
 * //       +0, +0, +1,
 *
 * @returns { Matrix } - Returns original matrix, it is identity matrix.
 * @method identity
 * @throws { Error } If arguments are passed.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function identity()
{
  let self = this;

  _.assert( arguments.length === 0, 'Expects no arguments' );

  self.atomEach( ( it ) => it.indexNd[ 0 ] === it.indexNd[ 1 ] ? self.atomSet( it.indexNd, 1 ) : self.atomSet( it.indexNd, 0 ) );

  return self;
}

//

/**
 * The method diagonalSet() assigns the values from {-src-} to the diagonal of current matrix.
 * If {-src-} is a Matrix, then method assigns the diagonal of {-src-} to the diagonal of current
 * matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   3, 2, 3,
 *   4, 0, 2
 *   0, 0, 6,
 * ]);
 *
 * var src = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   +1, +2, +3,
 *   +4, +5, +4
 *   +3, +2, +1,
 * ]);
 *
 * var got = matrix.diagonalSet( src );
 * console.log( got );
 * // log
 * +1, +2, +3,
 * +4, +5, +2,
 * +0, +0, +1,
 *
 * @param { Number|Long|VectorAdapter|Matrix } src - The values.
 * @returns { Matrix } - Returns original matrix with changed diagonal values.
 * @method diagonalSet
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If src.length is not same as minimal dimension of the current matrix.
 * @throws { Error } If number of dimensions of current matrix is not 2.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function diagonalSet( src )
{
  let self = this;
  let length = Math.min( self.atomsPerCol, self.atomsPerRow );

  if( src instanceof Self )
  src = src.diagonalVectorGet();

  src = self.vectorAdapter.fromMaybeNumber( src, length );

  _.assert( arguments.length === 1, 'Expects single argument' );
  _.assert( self.dims.length === 2 );
  _.assert( src.length === length );

  for( let i = 0 ; i < length ; i += 1 )
  {
    self.atomSet( [ i, i ], src.eGet( i ) );
  }

  return self;
}

//

/**
 * The method diagonalVectorGet() returns vector with values of diagonal of current matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   +3, +2, +3,
 *   +4, +0, +2
 *   +0, +0, +6,
 * ]);
 *
 * var got = matrix.diagonalVectorGet();
 * console.log( got );
 * // log : 3.000 0.000 6.000
 *
 * @returns { VectorAdapter } - Returns vector of diagonal values.
 * @method diagonalVectorGet
 * @throws { Error } If arguments are passed.
 * @throws { Error } If number of dimensions of current matrix is not 2.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function diagonalVectorGet()
{
  let self = this;
  let length = Math.min( self.atomsPerCol, self.atomsPerRow );
  let strides = self._stridesEffective;

  _.assert( arguments.length === 0, 'Expects no arguments' );
  _.assert( self.dims.length === 2 );

  let result = self.vectorAdapter.fromLongLrangeAndStride( self.buffer, self.offset, length, strides[ 0 ] + strides[ 1 ] );

  return result;
}

//

/**
 * The method triangleLowerSet() assigns the value from source value {-src-} to the lower
 * triangle of current matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   0, 0, 0,
 *   0, 0, 0,
 *   0, 0, 0,
 * ]);
 *
 * var src = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   1, 1, 1,
 *   1, 1, 1,
 *   1, 1, 1,
 * ]);
 *
 * var got = matrix.triangleLowerSet( src );
 * console.log( got );
 * // log : +0, +0, +0,
 * //       +1, +0, +0,
 * //       +1, +1, +0,
 *
 * @param { Number|Matrix } src - Source values.
 * @returns { Matrix } - Returns original matrix with changed lower triangle.
 * @method triangleLowerSet
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If number of dimensions or current matrix is not 2.
 * @throws { Error } If {-src-} is instance of Matrix and number of its rows is less then number of rows in current matrix.
 * @throws { Error } If {-src-} is instance of Matrix and number of its columns is less minimal value of next parameters: decremented number or rows of current matrix or number of columns of current matrix.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function triangleLowerSet( src )
{
  let self = this;
  let nrow = self.nrow;
  let ncol = self.ncol;

  _.assert( arguments.length === 1, 'Expects single argument' );
  _.assert( self.dims.length === 2 );

  _.assert( _.numberIs( src ) || src instanceof Self );

  if( src instanceof Self )
  {

    _.assert( src.dims[ 0 ] >= self.dims[ 0 ] );
    _.assert( src.dims[ 1 ] >= min( self.dims[ 0 ]-1, self.dims[ 1 ] ) );

    for( let r = 1 ; r < nrow ; r++ )
    {
      let cl = min( r, ncol );
      for( let c = 0 ; c < cl ; c++ )
      self.atomSet( [ r, c ], src.atomGet([ r, c ]) );
    }

  }
  else
  {

    for( let r = 1 ; r < nrow ; r++ )
    {
      let cl = min( r, ncol );
      for( let c = 0 ; c < cl ; c++ )
      self.atomSet( [ r, c ], src );
    }

  }

  return self;
}

//

/**
 * The method triangleUpperSet() assigns the value from source value {-src-} to the upper
 * triangle of current matrix.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   0, 0, 0,
 *   0, 0, 0,
 *   0, 0, 0,
 * ]);
 *
 * var src = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   1, 1, 1,
 *   1, 1, 1,
 *   1, 1, 1,
 * ]);
 *
 * var got = matrix.triangleUpperSet( src );
 * console.log( got );
 * // log : +0, +1, +1,
 * //       +0, +0, +1,
 * //       +0, +0, +0,
 *
 * @param { Number|Matrix } src - Source values.
 * @returns { Matrix } - Returns original matrix with changed upper triangle.
 * @method triangleUpperSet
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If number of dimensions or current matrix is not 2.
 * @throws { Error } If {-src-} is instance of Matrix and number of its columns is less then number of columns in current matrix.
 * @throws { Error } If {-src-} is instance of Matrix and number of its rows is less minimal value of next parameters: decremented number or columns of current matrix or number of columns of current matrix.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function triangleUpperSet( src )
{
  let self = this;
  let nrow = self.nrow;
  let ncol = self.ncol;

  _.assert( arguments.length === 1, 'Expects single argument' );
  _.assert( self.dims.length === 2 );

  _.assert( _.numberIs( src ) || src instanceof Self );

  if( src instanceof Self )
  {

    _.assert( src.dims[ 1 ] >= self.dims[ 1 ] );
    _.assert( src.dims[ 0 ] >= min( self.dims[ 1 ]-1, self.dims[ 0 ] ) );

    for( let c = 1 ; c < ncol ; c++ )
    {
      let cl = min( c, nrow );
      for( let r = 0 ; r < cl ; r++ )
      self.atomSet( [ r, c ], src.atomGet([ r, c ]) );
    }

  }
  else
  {

    for( let c = 1 ; c < ncol ; c++ )
    {
      let cl = min( c, nrow );
      for( let r = 0 ; r < cl ; r++ )
      self.atomSet( [ r, c ], src );
    }

  }

  return self;
}

// --
// transformer
// --

// function applyMatrixToVector( dstVector )
// {
//   let self = this;
//
//   _.assert( 0, 'deprecated' );
//
//   self.vectorAdapter.matrixApplyTo( dstVector, self );
//
//   return self;
// }

//

// function matrixHomogenousApply( dstVector )
// {
//   let self = this;
//
//   _.assert( arguments.length === 1 )
//   _.assert( 0, 'not tested' );
//
//   self.vectorAdapter.matrixHomogenousApply( dstVector, self );
//
//   return self;
// }

/**
 * The method matrixApplyTo() provides multiplication of current matrix on destination vector {-dst-}.
 * The result of multiplication applies to destination vector.
 *
 * @example
 * var matrix = _.Matrix.makeSquare( [ 1, 1, 2, 2 ] );
 * var dstVector = [ 1, 1 ];
 *
 * var got = matrix.matrixApplyTo( dstVector );
 * console.log( got );
 * // log : [ 2, 4 ]
 * console.log( dstVector === got );
 * // log : true
 *
 * @param { VectorAdapter|Long } dstVector - Destination vector, an instance of VectorAdapter or Long.
 * @returns { VectorAdapter } - Returns destination vector with result of multiplication.
 * @method matrixApplyTo
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If {-dstVector-} is not a Long, not a VectorAdapter.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function matrixApplyTo( dstVector )
{
  let self = this;

  if( self.hasShape([ 3, 3 ]) )
  {

    let dstVectorv = self.vectorAdapter.from( dstVector );
    let x = dstVectorv.eGet( 0 );
    let y = dstVectorv.eGet( 1 );
    let z = dstVectorv.eGet( 2 );

    let s00 = self.atomGet([ 0, 0 ]), s10 = self.atomGet([ 1, 0 ]), s20 = self.atomGet([ 2, 0 ]);
    let s01 = self.atomGet([ 0, 1 ]), s11 = self.atomGet([ 1, 1 ]), s21 = self.atomGet([ 2, 1 ]);
    let s02 = self.atomGet([ 0, 2 ]), s12 = self.atomGet([ 1, 2 ]), s22 = self.atomGet([ 2, 2 ]);

    dstVectorv.eSet( 0 , s00 * x + s01 * y + s02 * z );
    dstVectorv.eSet( 1 , s10 * x + s11 * y + s12 * z );
    dstVectorv.eSet( 2 , s20 * x + s21 * y + s22 * z );

    return dstVector;
  }
  else if( self.hasShape([ 2, 2 ]) )
  {

    let dstVectorv = self.vectorAdapter.from( dstVector );
    let x = dstVectorv.eGet( 0 );
    let y = dstVectorv.eGet( 1 );

    let s00 = self.atomGet([ 0, 0 ]), s10 = self.atomGet([ 1, 0 ]);
    let s01 = self.atomGet([ 0, 1 ]), s11 = self.atomGet([ 1, 1 ]);

    dstVectorv.eSet( 0 , s00 * x + s01 * y );
    dstVectorv.eSet( 1 , s10 * x + s11 * y );

    return dstVector;
  }

  return Self.mul( dstVector, [ self, dstVector ] );
}

//

/**
 * The method matrixHomogenousApply() calculates the homogenous value for each row
 * of current matrix and applies it to the destination vector {-dst-}.
 *
 * @example
 * var matrix = _.Matrix.make( [ 4, 4 ] ).copy
 * ([
 *   1, 0, 0, 0,
 *   0, 1, 0, 0,
 *   0, 0, 1, 0,
 *   0, 0, 1, 0,
 * ]);
 *
 * var dstVector = [ 1, 2, 1 ];
 *
 * var got = matrix.matrixHomogenousApply( dstVector );
 * console.log( got );
 * // log : [ 1, 2, 1 ]
 * console.log( got === dstVector );
 * // log : true
 *
 * @param { VectorAdapter|Long } dstVector - Destination vector, an instance of VectorAdapter or Long.
 * @returns { VectorAdapter } - Returns the vector with homogenous values.
 * @method matrixHomogenousApply
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If {-dstVector-} is not a Long, not a VectorAdapter.
 * @throws { Error } If dst.length is not equal to number of columns of matrix decremented by 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function matrixHomogenousApply( dstVector )
{
  let self = this;
  let _dstVector = self.vectorAdapter.from( dstVector );
  let dstLength = dstVector.length;
  let ncol = self.ncol;
  let nrow = self.nrow;
  let result = new Array( nrow );

  _.assert( arguments.length === 1 );
  _.assert( dstLength === ncol-1 );

  result[ dstLength ] = 0;
  for( let i = 0 ; i < nrow ; i += 1 )
  {
    let row = self.rowVectorGet( i );

    result[ i ] = 0;
    for( let j = 0 ; j < dstLength ; j++ )
    result[ i ] += row.eGet( j ) * _dstVector.eGet( j );

    result[ i ] += row.eGet( dstLength );

  }

  for( let j = 0 ; j < dstLength ; j++ )
  _dstVector.eSet( j, result[ j ] / result[ dstLength ] );

  return dstVector;
}

//

/**
 * The method matrixDirectionsApply() calculates directions of matrix and applies it to
 * destination vector {-dstVector-}.
 *
 * @example
 * var matrix = _.Matrix.make([ 3, 3 ]).copy
 * ([
 *   4, 0, 1,
 *   0, 5, 2,
 *   0, 0, 1,
 * ]);
 *
 * var dst = _.vectorAdapter.fromLong( [ 1, 1 ] );
 *
 * var got = matrix.matrixDirectionsApply( dstVector );
 * console.log
 * // log : [ 4, 5 ]
 * console.log( got === dst );
 * // log : true
 *
 * @param { VectorAdapter|Long } dstVector - Destination vector.
 * @returns { VectorAdapter } - Returns destination vector with changed values.
 * @method matrixDirectionsApply
 * @throws { Error } If arguments.length is not 1.
 * @throws { Error } If {-dstVector-} is not a Long, not a VectorAdapter.
 * @throws { Error } If dst.length is not equal to number of columns of matrix decremented by 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function matrixDirectionsApply( dstVector )
{
  let self = this;
  let dstLength = dstVector.length;
  let ncol = self.ncol;
  let nrow = self.nrow;

  _.assert( arguments.length === 1 );
  _.assert( dstLength === ncol-1 );

  debugger;

  // Self.mul( v, [ self.submatrix([ [ 0, v.length ], [ 0, v.length ] ]), v ] ); /* Dmytro : unknown variable v. Please, clarify this moment */
  // self.vectorAdapter.normalize( v );
  Self.mul( dstVector, [ self.submatrix([ [ 0, dstVector.length ], [ 0, dstVector.length ] ]), dstVector ] );
  self.vectorAdapter.normalize( dstVector );

  return dstVector;
}

//

/**
 * The method positionGet() gets the vector from last column of matrix.
 * The vector has length equivalent to row length decremented by one.
 *
 * @example
 * var buffer = _.Matrix.makeSquare
 * ([
 *   +2, +2, +2,
 *   +2, +3, +4,
 *   +4, +3, -2,
 * ]);
 *
 * var got = matrix.positionGet();
 * console.log( got.toStr() );
 * // log : 2.000 4.000
 *
 * @returns { VectorAdapter } - Returns vector from last column of the matrix.
 * @method positionGet
 * @throws { Error } If arguments are passed.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function positionGet()
{
  let self = this;
  let l = self.length;
  let loe = self.atomsPerElement;
  let result = self.colVectorGet( l-1 );

  _.assert( arguments.length === 0, 'Expects no arguments' );

  // debugger;
  result = self.vectorAdapter.fromLongLrange( result, 0, loe-1 );

  //let result = self.elementsInRangeGet([ (l-1)*loe, l*loe ]);
  //let result = self.vectorAdapter.fromLongLrange( this.buffer, 12, 3 );

  return result;
}

//

/**
 * The method positionSet() assigns vector {-src-} to the vector maiden from last column
 * of the matrix. The column does not include last element.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   +6, +4, +6,
 *   +8, +0, +4
 *   +0, +0, +12,
 * ]);
 *
 * var src = [ 4, 4 ];
 *
 * var got = matrix.positionSet( src );
 * console.log( got );
 * // log 4.000, 4.000
 *
 * @param { Long|VectorAdapter } src - Source vector.
 * @returns { VectorAdapter } - Returns vector specified by the matrix.
 * @method positionSet
 * @throws { Error } If src.length is equal or great then length of the matrix row.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function positionSet( src )
{
  let self = this;
  src = self.vectorAdapter.fromLong( src );
  let dst = this.positionGet();

  _.assert( src.length === dst.length );

  self.vectorAdapter.assign( dst, src );
  return dst;
}

//

/**
 * The method scaleMaxGet() calculates maximum value of scale of the matrix.
 *
 * @example
 * var buffer = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   2,  2,  2,
 *   2,  3,  4,
 *   4,  3, -2,
 * ]);
 *
 * var dst = _.vectorAdapter.fromLong( [ 0, 0 ] );
 *
 * var got = matrix.scaleMaxGet( dst )
 * console.log( got )
 * // log : 3.605551275463989
 *
 * @param { Long|VectorAdapter } dst - Destination vector for scales.
 * @returns { Number } - Returns maximum value of scale.
 * @method scaleMaxGet
 * @throws { Error } If {-dst-} is not an instance of VectorAdapter or Array.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function scaleMaxGet( dst )
{
  let self = this;
  let scale = self.scaleGet( dst );
  let result = _.avector.reduceToMaxAbs( scale ).value;
  return result;
}

//

/**
 * The method scaleMeanGet() returns medium value of scale of the matrix.
 *
 * @example
 * var buffer = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   2,  2,  2,
 *   2,  3,  4,
 *   4,  3, -2,
 * ]);
 *
 * var dst = _.vectorAdapter.fromLong( [ 0, 0 ] );
 *
 * var got = matrix.scaleMeanGet( dst )
 * console.log( got )
 * // log : 3.2169892001050897
 *
 * @param { VectorAdapter } dst - Destination vector for scales.
 * @returns { Number } - Returns medium value of scales of the matrix.
 * @method scaleMeanGet
 * @throws { Error } If {-dst-} is not an instance of an Long or a VectorAdapter.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function scaleMeanGet( dst )
{
  let self = this;
  let scale = self.scaleGet( dst );
  let result = _.avector.reduceToMean( scale );
  return result;
}

//

/**
 * The method scaleMagGet() returns magnitude of scale specified by the matrix.
 *
 * @example
 * var buffer = new I32x
 * ([
 *   +2, +2, +2,
 *   +2, +3, +4,
 *   +4, +3, -2,
 * ]);
 *
 * var matrix = new _.Matrix
 * ({
 *   buffer,
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var dst = _.vectorAdapter.fromLong( [ 0, 0 ] );
 *
 * var got = matrix.scaleMagGet( dst )
 * console.log( got )
 * // log 4.58257569495584
 *
 * @param { VectorAdapter } dst - an instance of VectorAdapter.
 * @returns { Number } - Returns magnitude of scale specified by the matrix.
 * @method scaleMagGet
 * @throws { Error } If {-dst-} is not an instance of VectorAdapter
 * @throws { Error } If (arguments.length) is not 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function scaleMagGet( dst )
{
  let self = this;
  let scale = self.scaleGet( dst );
  let result = _.avector.mag( scale );
  return result;
}

//

/**
 * The method matrix.scaleGet() returns scale specified by the matrix.
 *
 * @example
 * var buffer = new I32x
 * ([
 *   +2, +2, +2,
 *   +2, +3, +4,
 *   +4, +3, -2,
 * ]);
 *
 * var matrix = new _.Matrix
 * ({
 *   buffer,
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var dst = _.vectorAdapter.fromLong( [ 0, 0 ] );
 *
 * var got = matrix.scaleGet( dst );
 * console.log( got );
 * // log 2.828, 3.606
 *
 * @param { Array|VectorAdapter } dst - Array or the instance of VectorAdapter.
 * @returns { Number } - Returns scale specified by the matrix.
 * @method scaleGet
 * @throws { Error } If {-dst-} is not an Array or the instance of VectorAdapter.
 * @throws { Error } If (arguments.length) is not 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

  function scaleGet( dst )
{
  let self = this;
  let l = self.length-1;
  let loe = self.atomsPerElement;

  if( dst )
  {
    if( _.arrayIs( dst ) )
    dst.length = self.length-1;
  }

  if( dst ) /* Dmytro : bug if dst is not an Array */
  l = dst.length;
  else
  dst = self.vectorAdapter.from( self.long.longMakeZeroed( self.length-1 ) );

  let dstv = self.vectorAdapter.from( dst );

  _.assert( arguments.length === 0 || arguments.length === 1 );

  for( let i = 0 ; i < l ; i += 1 )
  dstv.eSet( i , self.vectorAdapter.mag( self.vectorAdapter.fromLongLrange( this.buffer, loe*i, loe-1 ) ) );

  return dst;
}

//

/**
 * The method matrix.scaleSet() returns scaled instance of Matrix, takes source from context.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   3, 2, 3,
 *   4, 0, 2,
 *   0, 0, 6,
 * ]);
 *
 * var src = _.vectorAdapter.fromLong( [ 0, 0 ] );
 *
 * var got = matrix.scaleSet( src );
 * console.log( got )
 * // log
 *  +0, +0, +0,
 *  +0, +0, +0,
 *  +0, +0, +0,
 *
 * @param { VectorAdapter|Long } src - the instance of VectorAdapter or Long.
 * @returns { Matrix } - Returns scaled instance of Matrix.
 * @method scaleSet
 * @throws { Error } If {-src-} is not an instance of VectorAdapter or Long.
 * @throws { Error } If (arguments.length) is not 1.
 * @throws { Error } If (src.length) is not equal (self.length) decrementing by 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function scaleSet( src )
{
  let self = this;
  src = self.vectorAdapter.fromLong( src );
  let l = self.length;
  let loe = self.atomsPerElement;
  let cur = this.scaleGet();

  _.assert( src.length === l-1 );

  for( let i = 0 ; i < l-1 ; i += 1 )
  self.vectorAdapter.mul( self.eGet( i ), src.eGet( i ) / cur[ i ] );

  let lastElement = self.eGet( l-1 );
  self.vectorAdapter.mul( lastElement, 1 / lastElement.eGet( loe-1 ) );

}

//

/**
 * The method matrix.scaleAroundSet() returns scaled matrix instance of around provided vector {-center-}, takes source from context.
 *
 * @example
 * var buffer = new I32x
 * ([
 *   1, 2, 0,
 *   0, 4, 1,
 *   1, 0, 0,
 * ]);
 * var matrix = new _.Matrix
 * ({
 *   buffer,
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var scale = _.vectorAdapter.fromLong( [ 0, 0 ] );
 * var center = _.vectorAdapter.fromLong( [ 2, 3 ] );
 *
 * var got = matrix.scaleAroundSet( src );
 * console.log( got )
 * // log
 *  +0, +0, +2,
 *  +0, +0, +3,
 *  +0, +0, +0,
 *
 * @param { VectorAdapter|Long } scale - the instance of VectorAdapter or Long.
 * @param { VectorAdapter|Long } center - the instance of VectorAdapter or Long.
 * @returns { Matrix } - Returns scaled instance of Matrix.
 * @method scaleAroundSet
 * @throws { Error } If {-center-} is not an instance of VectorAdapter or Long.
 * @throws { Error } If {-scale-} is not an instance of VectorAdapter or Long.
 * @throws { Error } If (scale.length) is not equal (self.length) decrementing by 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function scaleAroundSet( scale, center )
{
  let self = this;
  scale = self.vectorAdapter.fromLong( scale );
  let l = self.length;
  let loe = self.atomsPerElement;
  let cur = this.scaleGet();

  _.assert( scale.length === l-1 );

  for( let i = 0 ; i < l-1 ; i += 1 )
  self.vectorAdapter.mul( self.eGet( i ), scale.eGet( i ) / cur[ i ] );

  let lastElement = self.eGet( l-1 );
  self.vectorAdapter.mul( lastElement, 1 / lastElement.eGet( loe-1 ) );

  /* */

  debugger;
  center = self.vectorAdapter.fromLong( center );
  let pos = self.vectorAdapter.slice( scale );
  pos = self.vectorAdapter.fromLong( pos );
  self.vectorAdapter.mul( pos, -1 );
  self.vectorAdapter.add( pos, 1 );
  self.vectorAdapter.mul( pos, center );
  // self.vectorAdapter.mulScalar( pos, -1 );
  // self.vectorAdapter.addScalar( pos, 1 );
  // self.vectorAdapter.mulVectors( pos, center );

  self.positionSet( pos );

}

//

/**
 * The method matrix.scaleApply() changes source vector {-src-}, takes source from context.
 *
 * @example
 * var buffer = new I32x
 * ([
 *   1, 2, 0,
 *   0, 4, 1,
 *   1, 0, 0,
 * ]);
 * var matrix = new _.Matrix
 * ({
 *   buffer,
 *   dims : [ 3, 3 ],
 *   inputTransposing : 1,
 * });
 *
 * var src = _.vectorAdapter.fromLong( [ 2, 3 ] );
 *
 * var got = matrix.scaleApply( src );
 * console.log( got )
 * // log
 * undefined
 *
 * @param { VectorAdapter|Long } src - the instance of VectorAdapter or Long.
 * @returns { Undefined } - Returns not a value, change source vector {-src-}.
 * @method scaleApply
 * @throws { Error } If {-src-} is not an instance of VectorAdapter or Long.
 * @throws { Error } If (arguments.length) is not 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function scaleApply( src )
{
  let self = this;
  src = self.vectorAdapter.fromLong( src );
  let ape = self.atomsPerElement;
  let l = self.length;

  for( let i = 0 ; i < ape ; i += 1 )
  {
    let c = self.rowVectorGet( i );
    c = self.vectorAdapter.fromLongLrange( c, 0, l-1 );
    self.vectorAdapter.mul( c, src );
    // self.vectorAdapter.mulVectors( c, src );
  }

}

// --
// reducer
// --

/**
 * The method matrix.closest() returns the closest element to provided element {-insElement-}.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   3, 2, 3,
 *   4, 0, 2,
 *   0, 0, 6,
 * ]);
 *
 * var insElement = _.vectorAdapter.fromLong( [ 2, 2, 1 ] );
 *
 * var got = matrix.closest( insElement );
 * console.log( got )
 * // log
 * {
 *  index: 1,
 *  distance: 2.23606797749979
 * }
 *
 * @param { VectorAdapter|Long } insElement - provided element, an instance of VectorAdapter or Long.
 * @returns { Map } - Returns index and distance of the closest element.
 * @method closest
 * @throws { Error } If {-insElement-} is not an instance of VectorAdapter or Long.
 * @throws { Error } If (arguments.length) is not 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function closest( insElement )
{
  let self = this;
  insElement = self.vectorAdapter.fromLong( insElement );
  let result =
  {
    index : null,
    distance : +Infinity,
  }

  _.assert( arguments.length === 1, 'Expects single argument' );

  for( let i = 0 ; i < self.length ; i += 1 )
  {

    let d = self.vectorAdapter.distanceSqr( insElement, self.eGet( i ) );
    if( d < result.distance )
    {
      result.distance = d;
      result.index = i;
    }

  }

  result.distance = sqrt( result.distance );

  return result;
}

//

/**
 * The method matrix.furthest() returns the furthest element to provided element {-insElement-}.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   3, 2, 3,
 *   4, 0, 2,
 *   0, 0, 6,
 * ]);
 *
 * var insElement = _.vectorAdapter.fromLong( [ 2, 2, 1 ] );
 *
 * var got = matrix.furthest( insElement );
 * console.log( got )
 * // log
 * {
 *  index: 2,
 *  distance: 5.0990195135927845
 * }
 *
 * @param { VectorAdapter|Long } insElement - provided element, an instance of VectorAdapter or Long.
 * @returns { Map } - Returns index and distance of the furthest element.
 * @method furthest
 * @throws { Error } If {-insElement-} is not an instance of VectorAdapter or Long.
 * @throws { Error } If (arguments.length) is not 1.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function furthest( insElement )
{
  let self = this;
  insElement = self.vectorAdapter.fromLong( insElement );
  let result =
  {
    index : null,
    distance : -Infinity,
  }

  _.assert( arguments.length === 1, 'Expects single argument' );

  for( let i = 0 ; i < self.length ; i += 1 )
  {

    let d = self.vectorAdapter.distanceSqr( insElement, self.eGet( i ) );
    if( d > result.distance )
    {
      result.distance = d;
      result.index = i;
    }

  }

  result.distance = sqrt( result.distance );

  return result;
}

//

/**
 * The method matrix.elementMean() returns medium element values of provided matrix,
 * takes source from context.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   3, 2, 3,
 *   4, 0, 2,
 *   0, 0, 6,
 * ]);
 *
 * var got = matrix.elementMean( );
 * console.log( got )
 * // log 2.333, 0.666, 3.666
 *
 * @returns { Number } - Returns medium element values of provided matrix.
 * @method elementMean
 * @throws { Error } If argument exist.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function elementMean()
{
  let self = this;

  let result = self.elementAdd();

  self.vectorAdapter.div( result, self.length );

  return result;
}

//

/**
 * The method matrix.minmaxColWise() compares columns values of matrix and returns min and max buffer instance with these values,
 * takes source from context.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   +1, +2, +3,
 *   +0, +4, +5
 *   +0, +0, +6,
 * ]);
 *
 * var got = matrix.minmaxColWise();
 * console.log( got );
 * // log
 * {
 *   min: Float32Array [ 0, 0, 3 ],
 *   max: Float32Array [ 1, 4, 6 ]
 * }
 *
 * @returns { TypedArrays } - Returns two instances of F32x buffers.
 * @method minmaxColWise
 * @throws { Error } If argument exist.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
   */

function minmaxColWise()
{
  let self = this;

  let minmax = self.distributionRangeSummaryValueColWise();
  let result = Object.create( null );

  result.min = self.long.longMakeUndefined( self.buffer, minmax.length );
  result.max = self.long.longMakeUndefined( self.buffer, minmax.length );

  for( let i = 0 ; i < minmax.length ; i += 1 )
  {
    result.min[ i ] = minmax[ i ][ 0 ];
    result.max[ i ] = minmax[ i ][ 1 ];
  }

  return result;
}

//

/**
 * The method matrix.minmaxRowWise() compares rows values of matrix and returns min and max buffer instance with these values,
 * takes source from context.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   +1, +2, +3,
 *   +0, +4, +5
 *   +0, +0, +6,
 * ]);
 *
 * var got = matrix.minmaxRowWise();
 * console.log( got );
 * // log
 * {
 *   min: Float32Array [ 1, 0, 0 ],
 *   max: Float32Array [ 3, 5, 6 ]
 * }
 *
 * @returns { TypedArrays } - Returns two instances of F32x buffers.
 * @method minmaxRowWise
 * @throws { Error } If argument exist.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function minmaxRowWise()
{
  let self = this;

  let minmax = self.distributionRangeSummaryValueRowWise();
  let result = Object.create( null );

  result.min = self.long.longMakeUndefined( self.buffer, minmax.length );
  result.max = self.long.longMakeUndefined( self.buffer, minmax.length );

  for( let i = 0 ; i < minmax.length ; i += 1 )
  {
    result.min[ i ] = minmax[ i ][ 0 ];
    result.max[ i ] = minmax[ i ][ 1 ];
  }

  return result;
}

//

/**
 * This method returns a determinant value of the provided matrix,
 * takes source from context.
 *
 * @example
 * var matrix = _.Matrix.make( [ 3, 3 ] ).copy
 * ([
 *   +1, +2, +3,
 *   +0, +4, +5
 *   +0, +0, +6,
 * ]);
 *
 * var got = matrix.determinant();
 * console.log( got );
 * // log 24
 *
 * @returns { Number } - Returns a determinant value of the provided matrix.
 * @method determinant
 * @throws { Error } If argument exist.
 * @class Matrix
 * @namespace wTools
 * @module Tools/math/Matrix
 */

function determinant()
{
  let self = this;
  let l = self.length;

  if( l === 0 )
  return 0;

  let iterations = _.math.factorial( l );
  let result = 0;

  _.assert( l === self.atomsPerElement );

  /* */

  let sign = 1;
  let index = [];
  for( let i = 0 ; i < l ; i += 1 )
  index[ i ] = i;

  /* */

  function add()
  {
    let r = 1;
    for( let i = 0 ; i < l ; i += 1 )
    r *= self.atomGet([ index[ i ], i ]);
    r *= sign;
    // console.log( index );
    // console.log( r );
    result += r;
    return r;
  }

  /* */

  function swap( a, b )
  {
    let v = index[ a ];
    index[ a ] = index[ b ];
    index[ b ] = v;
    sign *= -1;
  }

  /* */

  let i = 0;
  while( i < iterations )
  {

    for( let s = 0 ; s < l-1 ; s++ )
    {
      let r = add();
      //console.log( 'add', i, index, r );
      swap( s, l-1 );
      i += 1;
    }

  }

  /* */

  // 00
  // 01
  //
  // 012
  // 021
  // 102
  // 120
  // 201
  // 210

  // console.log( 'determinant', result );

  return result;
}

// --
// relations
// --

let Statics = /* qqq : split static routines. ask how */
{

  /* borrow */

  _tempBorrow,
  tempBorrow : tempBorrow1,
  tempBorrow1,
  tempBorrow2,
  tempBorrow3,

  /* mul */

  mul : mul_static,
  mul2Matrices : Mul2Matrices,

  /* var */

  _tempMatrices : [ Object.create( null ) , Object.create( null ) , Object.create( null ) ],

}

/*
map
filter
reduce
zip
*/

// --
// declare
// --

let Extension =
{

  // borrow

  _tempBorrow,
  tempBorrow : tempBorrow1,
  tempBorrow1,
  tempBorrow2,
  tempBorrow3,

  // mul

  pow : matrixPow,
  mul,
  mul2Matrices,
  mulLeft,
  mulRight,

  // partial accessors

  zero,
  identity,
  diagonalSet,
  diagonalVectorGet,
  triangleLowerSet,
  triangleUpperSet,

  // transformer

  matrixApplyTo,
  matrixHomogenousApply,
  matrixDirectionsApply,

  positionGet,
  positionSet,
  scaleMaxGet,
  scaleMeanGet,
  scaleMagGet,
  scaleGet,
  scaleSet,
  scaleAroundSet,
  scaleApply,

  // reducer

  closest,
  furthest,

  elementMean,

  minmaxColWise,
  minmaxRowWise,

  determinant,

  //

  Statics,

}

_.classExtend( Self, Extension );
_.assert( Self.mul2Matrices === Mul2Matrices );
_.assert( Self.prototype.mul2Matrices === mul2Matrices );

})();
